import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { usePackages } from '../context/PackageContext';
import Navbar from '../components/common/Navbar';
import StatusBadge from '../components/common/StatusBadge';
import { 
  Truck, 
  Package, 
  Search, 
  Filter, 
  RefreshCw, 
  Save, 
  AlertCircle,
  CheckCircle,
  Clock,
  Scale,
  ExternalLink,
  ImageIcon,
  ChevronDown
} from 'lucide-react';
import { toast } from 'react-toastify';

const LogisticsPage: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const { packages, refreshData } = usePackages();
  
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('logistics_pending');
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [selectedPackage, setSelectedPackage] = useState<any>(null);
  const [showLogisticsForm, setShowLogisticsForm] = useState(false);
  
  // Logistics form data
  const [logisticsData, setLogisticsData] = useState({
    courierCompany: '',
    courierTrackingNumber: '',
    weight: '',
    weightUnit: 'kg',
    dimensions: '',
    notes: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [imageAfterPacking, setImageAfterPacking] = useState<File[]>([]);

  useEffect(() => {
    if (!user) {
      navigate('/');
    } else if (user.role !== 'logistics') {
      navigate('/dashboard');
    }
  }, [user, navigate]);

  if (!user || user.role !== 'logistics') return null;

  // Get packages that need logistics processing (packages with status 'logistics_pending' or 'submitted' with courier transport)
  const logisticsPackages = packages.filter(pkg => {
    const matchesSearch = searchQuery === '' || 
      pkg.trackingNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      pkg.recipient?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      pkg.description?.toLowerCase().includes(searchQuery.toLowerCase());
    
    // Show packages that are either:
    // 1. In 'logistics_pending' status, or
    // 2. In 'submitted' status with courier transport
    const needsLogisticsProcessing = 
      pkg.status === 'logistics_pending' || 
      (pkg.status === 'submitted' && pkg.transportationType === 'courier');
    
    // If a status filter is applied, only show packages that match the filter
    if (statusFilter && statusFilter !== 'all') {
      return pkg.status === statusFilter && matchesSearch;
    }
    
    // Otherwise, show all packages that need logistics processing
    return needsLogisticsProcessing && matchesSearch;
  });

  const handleRefresh = () => {
    if (refreshData) {
      setIsRefreshing(true);
      refreshData().finally(() => {
        setTimeout(() => setIsRefreshing(false), 500);
      });
    }
  };

  const handlePackageSelect = (pkg: any) => {
    setSelectedPackage(pkg);
    setLogisticsData({
      courierCompany: pkg.courierName || pkg.courier_name || '',
      courierTrackingNumber: pkg.courierTrackingNumber || pkg.courier_tracking_number || '',
      weight: pkg.weight || '',
      weightUnit: pkg.weightUnit || pkg.weight_unit || 'kg',
      dimensions: pkg.dimension || '',
      notes: pkg.notes || ''
    });
    setImageAfterPacking([]);
    setShowLogisticsForm(true);
  };

  const handleLogisticsSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedPackage) return;

    setIsSubmitting(true);
    try {
      const formData = new FormData();
      
      // Add logistics data
      formData.append('courier_name', logisticsData.courierCompany);
      formData.append('courier_tracking_number', logisticsData.courierTrackingNumber);
      formData.append('weight', logisticsData.weight);
      formData.append('weight_unit', logisticsData.weightUnit);
      formData.append('dimension', logisticsData.dimensions);
      formData.append('notes', logisticsData.notes);
      formData.append('logistics_processed', 'true');
      formData.append('processed_by_logistics', user.id);
      
      // Add image after packing files
      imageAfterPacking.forEach(file => formData.append('image_after_packing', file));

      const response = await fetch(`/api/packages/${selectedPackage.id}/logistics`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: formData
      });

      if (!response.ok) {
        throw new Error('Failed to update logistics information');
      }

      toast.success('Logistics information updated successfully');
      setShowLogisticsForm(false);
      setSelectedPackage(null);
      setImageAfterPacking([]);
      handleRefresh();
    } catch (error) {
      console.error('Error updating logistics:', error);
      toast.error('Failed to update logistics information');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    if (type === 'file') {
      const files = (e.target as HTMLInputElement).files;
      if (name === 'imageAfterPacking') {
        setImageAfterPacking(files ? Array.from(files) : []);
      }
      return;
    }
    
    setLogisticsData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="min-h-screen bg-slate-50 flex flex-col">
      <Navbar />
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-6 gap-4">
          <h1 className="text-2xl font-bold text-slate-800">Logistics Dashboard</h1>
          
          <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
            {/* Status Filter */}
            <div className="relative">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="w-full px-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              >
                <option value="all">All Packages</option>
                <option value="logistics_pending">Pending Logistics</option>
                <option value="submitted">Ready for Manager</option>
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-slate-700">
                <ChevronDown className="h-4 w-4" />
              </div>
            </div>
            
            {/* Search Box */}
            <div className="relative flex-1">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-4 w-4 text-slate-400" />
              </div>
              <input
                type="text"
                placeholder="Search packages..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              />
            </div>
            
            <button
              onClick={handleRefresh}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center justify-center gap-2"
              disabled={isRefreshing}
            >
              <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </button>
          </div>
        </div>
                  <Search className="absolute left-3 top-2.5 h-4 w-4 text-slate-400" />
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search packages..."
                    className="w-full pl-10 pr-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500"
                  />
                </div>
              </div>
              
              <div>
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500"
                >
                  <option value="submitted">Submitted (Courier)</option>
                  <option value="all">All Packages</option>
                  <option value="approved">Approved</option>
                  <option value="rejected">Rejected</option>
                  <option value="dispatched">Dispatched</option>
                </select>
              </div>
            </div>
          </div>
        </header>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <div className="flex items-center">
              <div className="p-3 bg-blue-100 rounded-full mr-4">
                <Clock className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-slate-500">Pending Processing</p>
                <p className="text-2xl font-bold text-blue-600">
                  {packages.filter(p => p.status === 'submitted' && p.transportationType === 'courier' && !p.logistics_processed).length}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <div className="flex items-center">
              <div className="p-3 bg-green-100 rounded-full mr-4">
                <CheckCircle className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-slate-500">Processed</p>
                <p className="text-2xl font-bold text-green-600">
                  {packages.filter(p => p.logistics_processed).length}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-sm border border-slate-200">
            <div className="flex items-center">
              <div className="p-3 bg-purple-100 rounded-full mr-4">
                <Truck className="h-6 w-6 text-purple-600" />
              </div>
              <div>
            <table className="min-w-full divide-y divide-slate-200">
              <thead className="bg-slate-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Tracking #
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Recipient
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Transport
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Courier Info
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-slate-200">
                {logisticsPackages.map((pkg) => (
                  <tr key={pkg.id} className="hover:bg-slate-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">
                      {pkg.trackingNumber || pkg.tracking_number}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                      {pkg.recipient}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <StatusBadge status={pkg.status} />
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        pkg.transportationType === 'courier' 
                          ? 'bg-blue-100 text-blue-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {pkg.transportationType === 'courier' ? 'Courier' : 'By Hand'}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm text-slate-900">
                      <div>
                        <div className="font-medium">
                          {pkg.courierName || pkg.courier_name || 'Not set'}
                        </div>
                        <div className="text-slate-500">
                          {pkg.courierTrackingNumber || pkg.courier_tracking_number || 'No tracking'}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handlePackageSelect(pkg)}
                          className="text-blue-600 hover:text-blue-800 flex items-center"
                          title="Process Logistics"
                        >
                          <Scale className="h-4 w-4 mr-1" />
                          Process
                        </button>
                        <button
                          onClick={() => navigate(`/package/${pkg.id}`)}
                          className="text-gray-600 hover:text-gray-800"
                          title="View Details"
                        >
                          <ExternalLink className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {logisticsPackages.length === 0 && (
              <div className="text-center py-12">
                <Package className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                <p className="text-slate-600">No packages found matching your criteria</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Logistics Form Modal */}
      {showLogisticsForm && selectedPackage && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-xl font-semibold text-slate-800">
                  Process Logistics - {selectedPackage.trackingNumber}
                </h3>
                <button
                  onClick={() => setShowLogisticsForm(false)}
                  className="text-slate-400 hover:text-slate-600"
                >
                  ×
                </button>
              </div>

              <form onSubmit={handleLogisticsSubmit} className="space-y-6">
                {/* Package Info */}
                <div className="bg-slate-50 p-4 rounded-lg">
                  <h4 className="font-medium text-slate-800 mb-2">Package Information</h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-slate-600">Recipient:</span>
                      <span className="ml-2 font-medium">{selectedPackage.recipient}</span>
                    </div>
                    <div>
                      <span className="text-slate-600">Status:</span>
                      <span className="ml-2"><StatusBadge status={selectedPackage.status} /></span>
                    </div>
                  </div>
                </div>

                {/* Courier Information */}
                <div>
                  <h4 className="font-medium text-slate-800 mb-4 flex items-center">
                    <Truck className="h-5 w-5 mr-2 text-blue-600" />
                    Courier Information
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Courier Company Name *
                      </label>
                      <input
                        type="text"
                        name="courierCompany"
                        value={logisticsData.courierCompany}
                        onChange={handleInputChange}
                        required
                        placeholder="e.g., FedEx, DHL, Blue Dart"
                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Courier Tracking Number
                      </label>
                      <input
                        type="text"
                        name="courierTrackingNumber"
                        value={logisticsData.courierTrackingNumber}
                        onChange={handleInputChange}
                        placeholder="e.g., 123456789 (Optional)"
                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>

                {/* Package & Weight Info */}
                <div>
                  <h4 className="font-medium text-slate-800 mb-4 flex items-center">
                    <Scale className="h-5 w-5 mr-2 text-blue-600" />
                    Package & Weight Information
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Weight
                      </label>
                      <input
                        type="text"
                        name="weight"
                        value={logisticsData.weight}
                        onChange={handleInputChange}
                        placeholder="e.g., 5.5"
                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Weight Unit
                      </label>
                      <select
                        name="weightUnit"
                        value={logisticsData.weightUnit}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        <option value="kg">kg</option>
                        <option value="g">g</option>
                        <option value="lb">lb</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Dimensions
                      </label>
                      <input
                        type="text"
                        name="dimensions"
                        value={logisticsData.dimensions}
                        onChange={handleInputChange}
                        placeholder="e.g., 10x10x5 cm"
                        className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>

                {/* Image After Packing */}
                <div>
                  <h4 className="font-medium text-slate-800 mb-4 flex items-center">
                    <ImageIcon className="h-5 w-5 mr-2 text-blue-600" />
                    Image After Packing
                  </h4>
                  
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Upload Image After Packing (JPG, JPEG, PNG)
                    </label>
                    <input
                      type="file"
                      name="imageAfterPacking"
                      accept="image/*"
                      multiple
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 file:mr-2 file:py-1 file:px-2 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                    />
                    {imageAfterPacking.length > 0 && (
                      <p className='text-xs text-slate-500 mt-1'>
                        Selected: {imageAfterPacking.map(file => file.name).join(', ')}
                      </p>
                    )}
                    <p className="text-xs text-slate-500 mt-1">
                      Upload images showing the package after it has been packed and ready for dispatch.
                    </p>
                  </div>
                </div>

                {/* Additional Notes */}
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Additional Notes
                  </label>
                  <textarea
                    name="notes"
                    value={logisticsData.notes}
                    onChange={handleInputChange}
                    rows={3}
                    placeholder="Any additional logistics notes..."
                    className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                {/* Action Buttons */}
                <div className="flex justify-end space-x-3 pt-4 border-t border-slate-200">
                  <button
                    type="button"
                    onClick={() => setShowLogisticsForm(false)}
                    className="px-4 py-2 border border-slate-300 rounded-md text-slate-700 hover:bg-slate-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center disabled:opacity-50"
                  >
                    {isSubmitting ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        Save Logistics Info
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default LogisticsPage;